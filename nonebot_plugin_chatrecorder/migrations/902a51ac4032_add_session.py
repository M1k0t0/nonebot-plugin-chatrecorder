"""add_session

Revision ID: 902a51ac4032
Revises: 9bca28bcb998
Create Date: 2023-06-28 14:44:16.544879

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy import select
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session

# revision identifiers, used by Alembic.
revision = "902a51ac4032"
down_revision = "9bca28bcb998"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table(
        "nonebot_plugin_chatrecorder_messagerecord", schema=None
    ) as batch_op:
        batch_op.add_column(sa.Column("session", sa.String(length=64), nullable=True))
        batch_op.alter_column(
            "bot_type",
            existing_type=sa.VARCHAR(length=64),
            type_=sa.String(length=32),
            existing_nullable=False,
        )

    Base = automap_base()
    Base.prepare(autoload_with=op.get_bind())
    MessageRecord = Base.classes.nonebot_plugin_chatrecorder_messagerecord
    SessionModel = Base.classes.nonebot_plugin_session_sessionmodel
    with Session(op.get_bind()) as session:
        select_statement = select(MessageRecord)
        messages = session.scalars(select_statement).all()

        for message in messages:
            level = "LEVEL0"
            if message.detail_type == "private":
                level = "LEVEL1"
            elif message.detail_type == "group":
                level = "LEVEL2"
            elif message.detail_type == "channel":
                level = "LEVEL3"

            model = SessionModel(
                bot_id=message.bot_id,
                bot_type=message.bot_type,
                platform=message.platform,
                level=level,
                id1=message.user_id,
                id2=message.group_id or message.channel_id,
                id3=message.guild_id,
            )

            statement = (
                select(SessionModel)
                .where(SessionModel.bot_id == model.bot_id)
                .where(SessionModel.bot_type == model.bot_type)
                .where(SessionModel.platform == model.platform)
                .where(SessionModel.level == model.level)
                .where(SessionModel.id1 == model.id1)
                .where(SessionModel.id2 == model.id2)
                .where(SessionModel.id3 == model.id3)
            )
            if session.scalars(statement).one_or_none():
                continue

            session.add(model)
            session.commit()
            session.refresh(model)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass

    # ### end Alembic commands ###
